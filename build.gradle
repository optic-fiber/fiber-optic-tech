buildscript {
    repositories {
        mavenCentral()
    }
    dependencies {
        classpath 'org.springframework.cloud:spring-cloud-contract-gradle-plugin:2.1.3.RELEASE'
        classpath 'com.android.tools.build:gradle:2.3.0'
    }
}


plugins {
    id 'java'
    id 'idea'
    id 'eclipse'
    id 'groovy'
    id 'java-library'
    id 'maven'
    id 'org.springframework.boot' version '2.1.9.RELEASE'
    id 'io.spring.dependency-management' version '1.0.8.RELEASE'
    id 'net.ltgt.apt' version '0.8'
}
//apply from: "$rootDir/gradle/jacoco.gradle"

group = 'com.cheroliv'
version = project_version


import org.springframework.boot.gradle.plugin.SpringBootPlugin

import java.nio.file.Paths

import static org.gradle.api.JavaVersion.VERSION_12

sourceCompatibility = VERSION_12
targetCompatibility = VERSION_12

repositories {
    mavenLocal()
    mavenCentral()
    gradlePluginPortal()
    maven { url 'http://repo.spring.io/plugins-release' }
    jcenter()
}

dependencyManagement {
    imports {
        mavenBom "org.springframework.cloud:spring-cloud-dependencies:$spring_cloud_dependencies_version"
        mavenBom SpringBootPlugin.BOM_COORDINATES
    }
}

ext {
    set('snippetsDir', file("build/generated-snippets"))
}

configurations {
    developmentOnly
    runtimeClasspath {
        extendsFrom developmentOnly
    }
    compileOnly {
        extendsFrom annotationProcessor
    }
    compile.exclude module: "spring-boot-starter-tomcat"
//    compile.exclude group: "com.vaadin.external.google"
//    compile.exclude module: "android-json"
}

test {
    useJUnitPlatform {
        excludeEngines 'junit-vintage'
        includeEngines 'junit-jupiter'
    }
    outputs.dir snippetsDir
}


bootJar {
    archiveVersion = project.version
}

bootRun {
    sourceResources sourceSets.main
}

springBoot {
    mainClassName = "com.cheroliv.opticfiber.FiberApplication"
}
dependencies {
    // DEVELOPER TOOLS
    developmentOnly 'org.springframework.boot:spring-boot-devtools'
    annotationProcessor 'org.springframework.boot:spring-boot-configuration-processor'
    implementation 'org.springframework.boot:spring-boot-starter-actuator'
    // GROOVY
    implementation "org.codehaus.groovy:groovy:$groovy_version"
    implementation "org.codehaus.groovy:groovy-json:$groovy_version"
    testImplementation "org.codehaus.groovy:groovy-all:$groovy_version"
    // SPRING STARTING POINT RESOURCES
    implementation 'org.springframework.boot:spring-boot-starter-web'
    //UNDERTOW APP SERV
    implementation "org.springframework.boot:spring-boot-starter-undertow"
    // MAIL
    implementation 'org.springframework.boot:spring-boot-starter-mail'
    // VIEW TEMPLATE
    implementation 'org.springframework.boot:spring-boot-starter-thymeleaf'
    // GRAPH_QL
//    implementation 'com.graphql-java-kickstart:graphql-spring-boot-starter:5.10.0'
//    implementation 'com.graphql-java-kickstart:graphql-java-tools:5.6.1'
//    runtime 'com.graphql-java-kickstart:graphiql-spring-boot-starter:5.10.0'
//    testImplementation 'com.graphql-java-kickstart:graphql-spring-boot-starter-test:5.10.0'
    // DATABASE ORM
    implementation 'org.springframework.boot:spring-boot-starter-data-jpa'
    implementation 'org.hibernate:hibernate-envers'
    // BEAN VALIDATION
    implementation 'org.springframework.boot:spring-boot-starter-validation'
    //CACHE
    implementation 'org.springframework.boot:spring-boot-starter-cache'
    implementation "javax.cache:cache-api:1.1.0"
    implementation "org.ehcache:ehcache:3.7.1"
    implementation "org.hibernate:hibernate-jcache"
    // BEAN MAPPING
//    annotationProcessor "org.mapstruct:mapstruct-processor:${mapstruct_version}"
    implementation "org.mapstruct:mapstruct:${mapstruct_version}"
    apt "org.mapstruct:mapstruct-processor:${mapstruct_version}"



    // DATABASE ACCESS DRIVER
    implementation 'com.h2database:h2'
    // COLLECTION HELPERS
    implementation 'com.google.guava:guava:28.0-jre'
    // STRING HELPERS
    implementation 'org.apache.commons:commons-lang3'
    //APACHE COMMONS-IO file manip
    implementation "commons-io:commons-io:$commons_io_version"
    // GROOVY DSL OVER POI
    implementation "com.jameskleeh:excel-builder:$excel_builder_version"
    implementation "org.apache.poi:poi:$poi_version"
    implementation "org.apache.poi:poi-ooxml:$poi_version"
    // XML/JSON PARSER
    implementation 'com.fasterxml.jackson.dataformat:jackson-dataformat-xml'


    // SECURITY
    implementation "org.springframework.boot:spring-boot-starter-security"

//    implementation "org.springframework.security:spring-security-web"
//    implementation "org.springframework.security:spring-security-config"
//    implementation "org.springframework.security:spring-security-data"

    testImplementation "org.springframework.security:spring-security-test"

    //SPRING MVC PROBLEM HELPER
    implementation "org.zalando:problem-spring-web:$problem_spring_web_version"

    //JSON HELPER
    implementation "io.jsonwebtoken:jjwt-api:$json_web_token_version"
    runtimeOnly "io.jsonwebtoken:jjwt-impl:$json_web_token_version"
    runtimeOnly "io.jsonwebtoken:jjwt-jackson:$json_web_token_version"



    //TDD
    // TDD:JUNIT SPRING
    testImplementation 'org.springframework.boot:spring-boot-starter-test'
//    testImplementation ('org.springframework.cloud:spring-cloud-starter-contract-stub-runner'){
//     exclude  group: 'org.mockito', module: 'mockito-core'
//    }
//    testImplementation 'org.springframework.cloud:spring-cloud-starter-contract-verifier'
//    testImplementation 'org.springframework.restdocs:spring-restdocs-mockmvc'

    // TDD:JUNIT5
    testImplementation("org.junit.jupiter:junit-jupiter:$junit_jupiter_version") {
        exclude module: 'junit-jupiter-params'
        exclude module: 'junit-jupiter-api'
    }
    testImplementation("org.junit.jupiter:junit-jupiter-params:$junit_jupiter_version")
    testImplementation("org.junit.jupiter:junit-jupiter-api:$junit_jupiter_version")

    //JUNIT4 VINTAGE TEST
    testCompileOnly 'junit:junit'
    // MOCKITO
    testImplementation 'org.mockito:mockito-core:3.1.0'
    testImplementation 'org.mockito:mockito-junit-jupiter:3.1.0'
    // CSV USAGE IN TEST
    testImplementation "com.xlson.groovycsv:groovycsv:$groovy_csv_version"
    // BDD:CUCUMBER
    testImplementation "io.cucumber:cucumber-junit:$cucumber_version"
    testImplementation "io.cucumber:cucumber-spring:$cucumber_version"
    testImplementation "io.cucumber:cucumber-groovy:$cucumber_version"
    testImplementation "io.cucumber:cucumber-java8:$cucumber_version"
}

defaultTasks "bootRun"

task dependencyReportFile(type: DependencyReportTask) {
    String outputFileName = 'dependencies.txt'
    String separator = Paths.get(System.getProperty('user.home')).fileSystem.separator
    File depFile = new File("${rootProject.projectDir}${separator}${outputFileName}".toString())
    !(depFile.exists() && !depFile.directory) ?: depFile.delete()
    outputFile = file(outputFileName)
}

task printHerokuVersion(type: Exec) {
    workingDir projectDir
    commandLine '/snap/bin/heroku', '-v'
    standardOutput = new ByteArrayOutputStream()
    doLast {
        println standardOutput.toString()
    }
}


task unitTests(type: Test) {
    useJUnitPlatform()
    description = "Execute unit tests."
    group = "verification"
    include "**/*UnitTest*"
    exclude "**/*CucumberIT*", "**/*IntegrationTest*"
    reports.html.enabled = true
}

task integrationTests(type: Test) {
    useJUnitPlatform()
    description = "Execute integration tests."
    group = "verification"
    include  "**/*IntegrationTest*"
    exclude "**/*CucumberIT*","**/*UnitTest*"
    reports.html.enabled = true
}

task bddTest(type: Test) {
    description = "Execute cucumber BDD tests."
    group = "verification"
    include "**/*CucumberIT*"
    reports.html.enabled = true
}

check.dependsOn bddTest

check.dependsOn integrationTests

task testReport(type: TestReport) {
    destinationDir = file("$buildDir/reports/tests")
    reportOn test
}

task integrationTestReport(type: TestReport) {
    destinationDir = file("$buildDir/reports/tests")
    reportOn integrationTests
}

task bddTestReport(type: TestReport) {
    destinationDir = file("$buildDir/reports/tests")
    reportOn bddTest
}

task cleanResources(type: Delete) {
    delete "build/resources"
}

compileGroovy.dependsOn processResources
